<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on Forgotten Land</title><link>https://causality.top/tags/security/</link><description>Recent content in Security on Forgotten Land</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 28 Apr 2021 08:37:10 +0800</lastBuildDate><atom:link href="https://causality.top/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Commons Collections 1 复现</title><link>https://causality.top/security/vulns/java/cc1/</link><pubDate>Wed, 28 Apr 2021 08:37:10 +0800</pubDate><guid>https://causality.top/security/vulns/java/cc1/</guid><description>利用链分析 先看一眼gadget chain： /* Gadget chain: ObjectInputStream.readObject() AnnotationInvocationHandler.readObject() Map(Proxy).entrySet() AnnotationInvocationHandler.invoke() LazyMap.get() ChainedTransformer.transform() ConstantTransformer.transform() InvokerTransformer.transform() Method.invoke() Class.getMethod() InvokerTransformer.transform() Method.invoke() Runtime.getRuntime() InvokerTransformer.transform() Method.invoke() Runtime.exec() Requires: commons-collections */ 参考这个利用链，其利用的关键在于几个Transformer，所以先来关注这几个类的方法的详细信息： ChainedTransformer 根据描述，这个</description></item><item><title>Urldns 复现</title><link>https://causality.top/security/vulns/java/urldns/</link><pubDate>Sun, 25 Apr 2021 08:26:45 +0800</pubDate><guid>https://causality.top/security/vulns/java/urldns/</guid><description>URLDNS分析 URLDNS是ysoserial中一个利用链的名称，其参数是一个URL，触发的结果是一次DNS请求。 核心代码很短： public class URLDNS implements ObjectPayload&amp;lt;Object&amp;gt; { public Object getObject(final String url) throws Exception { URLStreamHandler handler = new SilentURLStreamHandler(); HashMap ht = new HashMap(); URL u = new URL(null, url, handler); ht.put(u, url); Reflections.setFieldValue(u, &amp;quot;hashCode&amp;quot;,</description></item><item><title>Netcat 小记</title><link>https://causality.top/security/tools/nc/</link><pubDate>Wed, 21 Apr 2021 08:24:50 +0800</pubDate><guid>https://causality.top/security/tools/nc/</guid><description>概述 Netcat（简称nc）是一个通过TCP/IP协议在网络连接中读写数据的工具，其强大之处在于几乎可以创建任何类型的连接，内置了各种实用的功能，报考端口扫描、数据传输、端口监听，因此甚至可以作为一个</description></item><item><title>反弹 Shell 小记</title><link>https://causality.top/security/notes/reverse-shell/</link><pubDate>Mon, 19 Apr 2021 16:24:01 +0800</pubDate><guid>https://causality.top/security/notes/reverse-shell/</guid><description>基本原理 首先是Shell，广义的Shell可以认为是一个应用程序，这个程序提供了与操作系统和其他应用程序交互的功能这样一种服务；操作系统shell可以分为CLI和GUI两种形式的。 而很多情况下，会在接</description></item><item><title>Java Reserialization</title><link>https://causality.top/security/posts/java/deserialization/</link><pubDate>Sun, 11 Apr 2021 20:01:18 +0800</pubDate><guid>https://causality.top/security/posts/java/deserialization/</guid><description>初窥 Before 在理解Java反序列化漏洞之前，首先需要了解Java序列化与反序列化、Java反射的基本概念： Java 序列化 Java 反射 简单来说，Java 序列化是指将 Java 对象转换成一个字节数组的过程；反序列化则是将一个字节数</description></item><item><title>Shiro 550</title><link>https://causality.top/security/vulns/shiro/shiro-550/</link><pubDate>Thu, 25 Mar 2021 11:34:06 +0800</pubDate><guid>https://causality.top/security/vulns/shiro/shiro-550/</guid><description>漏洞成因 默认情况下，shiro使用CookieRememberMeManager，其将用户的身份进行序列化、加密和编码，以便日后检索。因此，当它收到一个未经认证的用户的请求时，它会通过以下方式寻找他们</description></item></channel></rss>