<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Forgotten Land</title><link>https://causality.top/tags/java/</link><description>Recent content in Java on Forgotten Land</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 21 Sep 2021 23:28:15 +0800</lastBuildDate><atom:link href="https://causality.top/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>CommonsCollections1</title><link>https://causality.top/security/posts/java/cc1/</link><pubDate>Tue, 21 Sep 2021 23:28:15 +0800</pubDate><guid>https://causality.top/security/posts/java/cc1/</guid><description>CommonsCollections1 Gadget Chain Gadget chain: ObjectInputStream.readObject() AnnotationInvocationHandler.readObject() Map(Proxy).entrySet() AnnotationInvocationHandler.invoke() LazyMap.get() ChainedTransformer.transform() ConstantTransformer.transform() InvokerTransformer.transform() Method.invoke() Class.getMethod() InvokerTransformer.transform() Method.invoke() Runtime.getRuntime() InvokerTransformer.transform() Method.invoke() Runtime.exec() Requires: commons-collections 这条利用链其实可以分为两个部分，后半部分从ChainedTransformer之后目的是为了构造一个可序列化的命令执行，前半部分则是用来触发这个操作的调用</description></item><item><title>URLDNS 反序列化利用链分析</title><link>https://causality.top/security/vulns/java/urldns/</link><pubDate>Sun, 25 Apr 2021 08:26:45 +0800</pubDate><guid>https://causality.top/security/vulns/java/urldns/</guid><description>URLDNS分析 URLDNS是ysoserial中一个利用链的名称，其参数是一个URL，触发的结果是一次DNS请求。 核心代码很短： public class URLDNS implements ObjectPayload&amp;lt;Object&amp;gt; { public Object getObject(final String url) throws Exception { URLStreamHandler handler = new SilentURLStreamHandler(); HashMap ht = new HashMap(); URL u = new URL(null, url, handler); ht.put(u, url); Reflections.setFieldValue(u, &amp;quot;hashCode&amp;quot;,</description></item><item><title>Reflection</title><link>https://causality.top/devops/java/reflection/</link><pubDate>Mon, 12 Apr 2021 18:32:24 +0800</pubDate><guid>https://causality.top/devops/java/reflection/</guid><description>Class 程序运行期间，Java虚拟机会为所有对象维护一个运行时的类型标识符，这个信息跟踪着每个对象所属的类。通过Class类，可以动态的访问这些信息。 Java 的 Object 和 Class 两者确实是一个有趣的关系，在我学习面向对象过程</description></item><item><title>Serialization</title><link>https://causality.top/devops/java/serialization/</link><pubDate>Mon, 12 Apr 2021 11:17:40 +0800</pubDate><guid>https://causality.top/devops/java/serialization/</guid><description>浅尝 序列化与反序列化 为了能够将对象在通信过程中进行传送，Java提供了序列化机制。简单来说，Java序列化就是将Java对象转换成字节序列的过程，而反序列化就是将字节序列在转换会Java对象的过程。 一</description></item><item><title>Java Reserialization</title><link>https://causality.top/security/posts/java/deserialization/</link><pubDate>Sun, 11 Apr 2021 20:01:18 +0800</pubDate><guid>https://causality.top/security/posts/java/deserialization/</guid><description>初窥 Before 在理解Java反序列化漏洞之前，首先需要了解Java序列化与反序列化、Java反射的基本概念： Java 序列化 Java 反射 简单来说，Java 序列化是指将 Java 对象转换成一个字节数组的过程；反序列化则是将一个字节数</description></item><item><title>Shiro 550</title><link>https://causality.top/security/vulns/shiro/shiro-550/</link><pubDate>Thu, 25 Mar 2021 11:34:06 +0800</pubDate><guid>https://causality.top/security/vulns/shiro/shiro-550/</guid><description>漏洞成因 默认情况下，shiro使用CookieRememberMeManager，其将用户的身份进行序列化、加密和编码，以便日后检索。因此，当它收到一个未经认证的用户的请求时，它会通过以下方式寻找他们</description></item></channel></rss>