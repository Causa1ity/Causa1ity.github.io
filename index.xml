<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Forgotten Land</title><link>https://causality.top/</link><description>Recent content on Forgotten Land</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 15 Jul 2021 16:47:20 +0800</lastBuildDate><atom:link href="https://causality.top/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo Web 0x03: 其他页面</title><link>https://causality.top/devops/web/hugo/0x03-archetypes/</link><pubDate>Thu, 15 Jul 2021 16:47:20 +0800</pubDate><guid>https://causality.top/devops/web/hugo/0x03-archetypes/</guid><description>Hugo Web Series 是记录使用 Hugo 搭建一个 Web 网站的记录系列，目标是记录下使用 Hugo + TailwindCSS + Vue 搭建网站的各种构思、问题。 这是本系列的第三篇，内容为 archetypes 介绍及其相关页面的创建。 Archetypes Archetypes，翻译为原型。前面也介绍过了，</description></item><item><title>Hugo Web 0x02: 创建主页</title><link>https://causality.top/devops/web/hugo/0x02-home/</link><pubDate>Thu, 15 Jul 2021 09:57:14 +0800</pubDate><guid>https://causality.top/devops/web/hugo/0x02-home/</guid><description>Hugo Web Series 是记录使用 Hugo 搭建一个 Web 网站的记录系列，目标是记录下使用 Hugo + TailwindCSS + Vue 搭建网站的各种构思、问题。 这是本系列的第二篇，内容为创建一个简单的主页。 基本结构 目标是创建一个基本的主页，其主要包括一个导航栏；主</description></item><item><title>Hugo Web 0x01: 基本框架</title><link>https://causality.top/devops/web/hugo/0x01-basic/</link><pubDate>Thu, 15 Jul 2021 09:57:03 +0800</pubDate><guid>https://causality.top/devops/web/hugo/0x01-basic/</guid><description>Hugo Web Series 是记录使用 Hugo 搭建一个 Web 网站的记录系列，目标是记录下使用 Hugo + TailwindCSS + Vue 搭建网站的各种构思、问题。 这是本系列的第一篇，主要内容为使用 Hugo + TailwindCSS 搭建一个简单的框架。 目录结构 由于是使用Hugo来生成一个网站，因</description></item><item><title>Commons Collections 1 复现</title><link>https://causality.top/security/vulns/java/cc1/</link><pubDate>Wed, 28 Apr 2021 08:37:10 +0800</pubDate><guid>https://causality.top/security/vulns/java/cc1/</guid><description>利用链分析 先看一眼gadget chain： /* Gadget chain: ObjectInputStream.readObject() AnnotationInvocationHandler.readObject() Map(Proxy).entrySet() AnnotationInvocationHandler.invoke() LazyMap.get() ChainedTransformer.transform() ConstantTransformer.transform() InvokerTransformer.transform() Method.invoke() Class.getMethod() InvokerTransformer.transform() Method.invoke() Runtime.getRuntime() InvokerTransformer.transform() Method.invoke() Runtime.exec() Requires: commons-collections */ 参考这个利用链，其利用的关键在于几个Transformer，所以先来关注这几个类的方法的详细信息： ChainedTransformer 根据描述，这个</description></item><item><title>Bash Redirect 小记</title><link>https://causality.top/devops/linux/bash-redirect/</link><pubDate>Mon, 26 Apr 2021 09:57:30 +0800</pubDate><guid>https://causality.top/devops/linux/bash-redirect/</guid><description>记一下和bash重定向相关的内容 文件描述符 先看一下bash的文档：这里有几个特殊的文件描述符，首先是/dev/fd/fd参考描述，其使用整数表示特殊的文件，具体需要向下参看； /dev/stdin: 标准输入，可以使用fd 0</description></item><item><title>Urldns 复现</title><link>https://causality.top/security/vulns/java/urldns/</link><pubDate>Sun, 25 Apr 2021 08:26:45 +0800</pubDate><guid>https://causality.top/security/vulns/java/urldns/</guid><description>URLDNS分析 URLDNS是ysoserial中一个利用链的名称，其参数是一个URL，触发的结果是一次DNS请求。 核心代码很短： public class URLDNS implements ObjectPayload&amp;lt;Object&amp;gt; { public Object getObject(final String url) throws Exception { URLStreamHandler handler = new SilentURLStreamHandler(); HashMap ht = new HashMap(); URL u = new URL(null, url, handler); ht.put(u, url); Reflections.setFieldValue(u, &amp;quot;hashCode&amp;quot;,</description></item><item><title>Netcat 小记</title><link>https://causality.top/security/tools/nc/</link><pubDate>Wed, 21 Apr 2021 08:24:50 +0800</pubDate><guid>https://causality.top/security/tools/nc/</guid><description>概述 Netcat（简称nc）是一个通过TCP/IP协议在网络连接中读写数据的工具，其强大之处在于几乎可以创建任何类型的连接，内置了各种实用的功能，报考端口扫描、数据传输、端口监听，因此甚至可以作为一个</description></item><item><title>反弹 Shell 小记</title><link>https://causality.top/security/notes/reverse-shell/</link><pubDate>Mon, 19 Apr 2021 16:24:01 +0800</pubDate><guid>https://causality.top/security/notes/reverse-shell/</guid><description>基本原理 首先是Shell，广义的Shell可以认为是一个应用程序，这个程序提供了与操作系统和其他应用程序交互的功能这样一种服务；操作系统shell可以分为CLI和GUI两种形式的。 而很多情况下，会在接</description></item><item><title>Font Family</title><link>https://causality.top/misc/tech/font-family/</link><pubDate>Wed, 14 Apr 2021 11:18:35 +0800</pubDate><guid>https://causality.top/misc/tech/font-family/</guid><description>font-family 应当至少在使用的 font-family 列表中添加一个通用的字体族名，因为无法保证用户的计算机内已经安装了指定的字体，也不能保证使用 @font-face 提供的字体移动能够正确地下载。提供通用的字体族使得浏览器可以在无法得到最佳字体的情况下</description></item><item><title>Reflection</title><link>https://causality.top/devops/java/reflection/</link><pubDate>Mon, 12 Apr 2021 18:32:24 +0800</pubDate><guid>https://causality.top/devops/java/reflection/</guid><description>Class 程序运行期间，Java虚拟机会为所有对象维护一个运行时的类型标识符，这个信息跟踪着每个对象所属的类。通过Class类，可以动态的访问这些信息。 Java 的 Object 和 Class 两者确实是一个有趣的关系，在我学习面向对象过程</description></item><item><title>Serialization</title><link>https://causality.top/devops/java/serialization/</link><pubDate>Mon, 12 Apr 2021 11:17:40 +0800</pubDate><guid>https://causality.top/devops/java/serialization/</guid><description>浅尝 序列化与反序列化 为了能够将对象在通信过程中进行传送，Java提供了序列化机制。简单来说，Java序列化就是将Java对象转换成字节序列的过程，而反序列化就是将字节序列在转换会Java对象的过程。 一</description></item><item><title>Java Reserialization</title><link>https://causality.top/security/posts/java/deserialization/</link><pubDate>Sun, 11 Apr 2021 20:01:18 +0800</pubDate><guid>https://causality.top/security/posts/java/deserialization/</guid><description>初窥 Before 在理解Java反序列化漏洞之前，首先需要了解Java序列化与反序列化、Java反射的基本概念： Java 序列化 Java 反射 简单来说，Java 序列化是指将 Java 对象转换成一个字节数组的过程；反序列化则是将一个字节数</description></item><item><title>Windows Task</title><link>https://causality.top/misc/tech/windows-task/</link><pubDate>Wed, 07 Apr 2021 21:09:04 +0800</pubDate><guid>https://causality.top/misc/tech/windows-task/</guid><description>Window下设置定时任务 设置定时程序 Windows搜索任务计划程序，一个典型的Windows三栏设计，右边可以选择创建任务或创建基本任务：我这里选择创建基本任务，然后依次设定即可： 编写需要执行的定时</description></item><item><title>Requests</title><link>https://causality.top/devops/python/requests/</link><pubDate>Wed, 07 Apr 2021 09:52:39 +0800</pubDate><guid>https://causality.top/devops/python/requests/</guid><description>Before Use Requests 是一个简单易用的 Python HTTP 库，通过这个库可以简单的构造出一个 HTTP 请求。 下载安装：pip install requests 初窥 最简单的请求 最基本的使用方法就是导入后直接使用requests对象，这个对象提供了提交各种请求的对应方法，如</description></item><item><title>Flask</title><link>https://causality.top/devops/python/flask/</link><pubDate>Thu, 25 Mar 2021 23:10:37 +0800</pubDate><guid>https://causality.top/devops/python/flask/</guid><description>Before Use 环境配置 和django不同，flask设计上没有使用类似flask create这样的命令来创建一个项目，因此项目结构又很大的自由性，但是也因此需要自己来注意合理对项目进行布局。官方文档中在Quci</description></item><item><title>Django</title><link>https://causality.top/devops/python/django/</link><pubDate>Thu, 25 Mar 2021 23:10:24 +0800</pubDate><guid>https://causality.top/devops/python/django/</guid><description>Intro Django 最初被设计用于具有快速开发需求的新闻类站点，目的是要实现简单快捷的网站开发。因此，可以使用 django 快速实现一个数据库驱动的 Web 应用。 Django 使用 MTV 模式架构，即：Model（模型）、Template（模板）、Vi</description></item><item><title>Shiro 550</title><link>https://causality.top/security/vulns/shiro/shiro-550/</link><pubDate>Thu, 25 Mar 2021 11:34:06 +0800</pubDate><guid>https://causality.top/security/vulns/shiro/shiro-550/</guid><description>漏洞成因 默认情况下，shiro使用CookieRememberMeManager，其将用户的身份进行序列化、加密和编码，以便日后检索。因此，当它收到一个未经认证的用户的请求时，它会通过以下方式寻找他们</description></item><item><title>Git</title><link>https://causality.top/devops/frame/git/</link><pubDate>Wed, 17 Mar 2021 20:07:02 +0800</pubDate><guid>https://causality.top/devops/frame/git/</guid><description>Submodules 基本使用 添加一个子模块： git submodule add https://github.com/username/repos.git path/to/dir 加载子模块： git submodule init git submodule update 更新子模块： 可以到子模块执行更新 或者：git submodule update &amp;ndash;remote</description></item><item><title>Mirrors</title><link>https://causality.top/misc/tech/mirrors/</link><pubDate>Wed, 25 Mar 2020 17:24:52 +0800</pubDate><guid>https://causality.top/misc/tech/mirrors/</guid><description>pypi 临时使用： 设为默认： pip config set global.index-url http://mirrors.aliyun.com/pypi/simple/ pip config set global.trusted-host mirrors.aliyun.com 也可以直接修改文件： windows下默认配置文件在C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming\pip [global] index-url = https://mirrors.aliyun.com/pypi/simple/ docker 加速器 ubuntu</description></item></channel></rss>